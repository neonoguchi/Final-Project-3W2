import pygame
import random
import time

#window dimensions
window_width = 800
window_height = 670
window_dimensions = (window_width, window_height)

screen_width = 800
screen_height = 600
screen_dimensions = (screen_width,screen_height)

class Player():
    def __init__(self):
        self.x = 600
        self.y = 550
        self.width = 25
        self.height = 25
        self.rect = pygame.Rect(self.x, self.y, self.width, self.height)
        self.color = pygame.Color(0, 210, 0)
        self.velo = 5
        self.health = 100
        self.max_health = self.health
        self.dead = False

    def update(self):
        #checks for movement
        self._movement()
        #checks if player is alive
        if self.health < 1:
            self.dead = True
    
    def take_dmg(self, damage):
        self.health -= damage
        self.update()
    
    def _movement(self):
        #wasd movement
        keys = pygame.key.get_pressed()
        if keys[pygame.K_w] and self.rect.y > 0:
            self.rect.y -= self.velo
        if keys[pygame.K_a] and self.rect.x > 0:
            self.rect.x -= self.velo
        if keys[pygame.K_s] and self.rect.y < screen_height - self.height:
            self.rect.y += self.velo
        if keys[pygame.K_d] and self.rect.x < screen_width - self.width:
            self.rect.x += self.velo

        #boundary
        self.rect.x = max(0, min(self.rect.x, screen_width - self.width))
        self.rect.y = max(0, min(self.rect.y, screen_height - self.height))
    
    def draw(self, screen):
        if not self.dead:
            pygame.draw.rect(screen, self.color, self.rect)
    
    def draw_health(self, screen):
        #hp bar on player
        current_hp = (self.health / self.max_health) * 100
        pygame.draw.rect(screen, (255,0,0), (self.rect.x - 39, self.rect.y - 15, 100, 5))
        pygame.draw.rect(screen, (0,255,0), (self.rect.x - 39, self.rect.y - 15, current_hp, 5))
        #hp bar on hud
        hud_healthbar_x = 470
        hud_healthbar_y = 620
        hud_healthbar_height = 30
        pygame.draw.rect(screen, (255,0,0), (hud_healthbar_x, hud_healthbar_y, 300, hud_healthbar_height))
        pygame.draw.rect(screen, (0,255,0), (hud_healthbar_x, hud_healthbar_y, current_hp*3, hud_healthbar_height))

class Door():
    def __init__(self, x=200, y=0, width=60, height=10):
        self.rect = pygame.Rect(x, y, width, height)
        self.color = 'Yellow'
        self.is_open = False
    
    def update(self, player):
        #player interact
        if self.rect.colliderect(player.rect):
            self.color = 'Yellow'
            #[E] interact with door
            if pygame.key.get_pressed()[pygame.K_e]:
                self.is_open = True
        else:
            self.color = 'Red'
    
    def generate_new_door(self):
        #door locations simplified
        topside = Door(random.randrange(0, screen_width - 60, 60), 0, 60, 10)
        bottomside = Door(random.randrange(0, screen_width - 60, 60), (screen_height - 10), 60, 10)
        leftside = Door(0, random.randrange(0, screen_height, 60), 10, 60)
        rightside = Door((screen_width - 10), random.randrange(0, screen_height, 60), 10, 60)
        return random.choice([topside, bottomside, leftside, rightside])

    def draw(self,screen):
        pygame.draw.rect(screen, pygame.Color(self.color), self.rect)

class Level():
    def __init__(self, level, pos=(20,620)):
        self.level = level
        self.pos = pos
        self.font = pygame.font.Font(None,40)

    def draw(self,screen):
        text = self.font.render(f"Lvl: {self.level}", True, 'White')
        screen.blit(text, self.pos)

class Hostile():
    def __init__(self):
        self.width = 80
        self.height = 80
        self.rect = pygame.Rect(random.randrange(screen_width - self.width), random.randrange(screen_height - self.height), self.width, self.height)
        self.color = pygame.Color('Red')
        self.base_velocity = 2
        self.velocity = self.base_velocity
        self.direction_x = random.choice([-1, 1])
        self.direction_y = random.choice([-1, 1])

    def update(self, player, level):
        self._movement(player)
        self._difficulty(level)
        
        #damage to player
        if self.rect.colliderect(player.rect):
            self.color = 'Blue'
            player.take_dmg(1)
            print(player.health)
        else:
            self.color = 'Red'

    def _difficulty(self, score):
        if score.level > 15:
            self.velocity = self.base_velocity * 1.3
        elif score.level > 10:
            self.velocity = self.base_velocity * 1.2
        elif score.level > 5:
            self.velocity = self.base_velocity * 1.1
            self.width = 10
            self.height = 10

    def _movement(self, player):
        #movement of hostile
        if self.rect.x < player.rect.x:
            self.rect.x += self.velocity
        elif self.rect.x > player.rect.x:
            self.rect.x -= self.velocity

        if self.rect.y < player.rect.y:
            self.rect.y += self.velocity
        elif self.rect.y > player.rect.y:
            self.rect.y -= self.velocity
        
        #boundary
        self.rect.x = max(0, min(self.rect.x, screen_width - self.width))
        self.rect.y = max(0, min(self.rect.y, screen_height - self.height))

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, self.rect)

# class Coin():
#     def __init__(self):
#         self.width = 20
#         self.height = 24
#         self.color = 'Yellow'
#         randscreen_width = random.randrange(screen_width - self.width)
#         randscreen_height = random.randrange(screen_height - self.height)
#         self.rect = pygame.Rect(randscreen_width, randscreen_height, self.width, self.height)

#     def update(self, player, coins):
#         if self.rect.colliderect(player.rect):
#             print(f'{len(coins)}x Collected!')
#             coins.append(self)

#     def draw(self, screen):
#         pygame.draw.rect(screen, self.color, self.rect)

class Heart():
    def __init__(self):
        self.width = 16
        self.height = 16
        self.color = 'Red'
        self.rect = pygame.Rect(random.randrange(screen_width - self.width), random.randrange(screen_height - self.height), self.width, self.height)

    def update(self, player):
        if self.rect.colliderect(player.rect):
            if player.health < 100:
                if player.health == 99:
                    player.health += 1
                if player.health == 98:
                    player.health += 2
                if player.health == 97:
                    player.health += 3
                if player.health == 96:
                    player.health += 4
                if player.health == 95:
                    player.health += 5
                if player.health == 94:
                    player.health += 6
                if player.health == 93:
                    player.health += 7
                if player.health == 92:
                    player.health += 8
                if player.health == 91:
                    player.health += 9
                if player.health <= 90:
                    player.health +=10
                
                #get rid of heart after collected


    def draw(self, screen):
        pygame.draw.rect(screen, self.color, self.rect)    

def generate_level(player, door, hostile):
    #player spawn based off of previous door
    if door.rect.x == 0:
        player.rect.topleft = (screen_width - player.rect.width, door.rect.centery - player.rect.height // 2)
    elif door.rect.x == screen_width - door.rect.width:
        player.rect.topleft = (0, door.rect.centery - player.rect.height // 2)
    elif door.rect.y == 0:
        player.rect.topleft = (door.rect.centerx - player.rect.width // 2, screen_height - player.rect.height)
    elif door.rect.y == screen_height - door.rect.height:
        player.rect.topleft = (door.rect.centerx - player.rect.width // 2, 0)
    #door constant (for new levels)
    door.color = 'Yellow'
    door.is_open = False

    #hostile spawn
    hostile.rect.x = random.randrange(screen_width - hostile.width)
    hostile.rect.y = random.randrange(screen_height - hostile.height)

def main():
    pygame.init()
    pygame.display.set_caption("Simple RPG")
    screen = pygame.display.set_mode(window_dimensions)
    clock = pygame.time.Clock()
    
    level = 1
    score= Level(level)
    
    player = Player()
    door = Door()
    hostile = Hostile()
    # coins = []
    # coin = Coin()
    
    heart = Heart()
    generate_level(player, door, hostile)

    #game loop
    running = True
    while running:
        #event handler
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
        #GAME JOVER
        if player.dead:
            #display game over screen that has:
            #"GAME OVER" text
            #retry button
            #quit button
            running = False
        #updates
        player.update()
        door.update(player)
        hostile.update(player, score)
        heart.update(player)
        # coin.update(player, coins)


        #background fill
        display_bg_color = ((15,30,15))
        console_color = ((60, 60, 60))
        screen.fill(console_color)
        pygame.draw.rect(screen, display_bg_color, (0, 0, screen_width, screen_height))

        #draw
        player.draw(screen)
        player.draw_health(screen)
        door.draw(screen)
        score.draw(screen)
        hostile.draw(screen)
        # coin.draw(screen)
        heart.draw(screen)

        if door.is_open:
            generate_level(player, door, hostile)
            level += 1
            print(f"Door opened! Transitioning to level {level}")
            score.level = level
            door = Door.generate_new_door(door)
        
        pygame.display.update()
        clock.tick(60) #fps


if __name__ == "__main__":
    main()