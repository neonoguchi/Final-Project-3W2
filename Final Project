import pygame
import random
import time

#window dimensions
screen_width = 800
screen_height = 600
screen_dimensions = (screen_width,screen_height)

velo = 5

class Player():
    def __init__(self, x=600, y=550, width=25, height=25, health=100):
        self.width = width
        self.height = height
        self.rect = pygame.Rect(x, y, width, height)
        self.color = pygame.Color(0, 210, 0)
        self.health = health
        self.dead = False

    def update(self):
        #checks health for death
        if self.health < 0:
            self.dead = True
    
    def take_dmg(self, damage):
        self.health -= damage
        self.update()
    
    def update_position(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_w] and self.rect.y > 0:
            self.rect.y -= velo
        if keys[pygame.K_a] and self.rect.x > 0:
            self.rect.x -= velo
        if keys[pygame.K_s] and self.rect.y < screen_height - self.height:
            self.rect.y += velo
        if keys[pygame.K_d] and self.rect.x < screen_width - self.width:
            self.rect.x += velo

    def borders(self):
        if self.y <= 0:
            self.y = 0
        elif self.y >= screen_height:
            self.y = screen_height
        
        if self.x <= 0:
            self.x = 0
        elif self.x >= screen_width:
            self.x = screen_width
    
    def draw(self, screen):
        if not self.dead:
            pygame.draw.rect(screen, self.color, self.rect)

class Door():
    def __init__(self, x, y, width, height):
        self.rect = pygame.Rect(x, y, width, height)
        self.color = 'Yellow'
        self.is_open = False
    
    def update(self, player):
        if self.rect.colliderect(player.rect):
            self.color = 'Yellow'
            #[E] interact with door
            if pygame.key.get_pressed()[pygame.K_e]:
                self.is_open = True
        else:
            self.color = 'Red'
    
    def generate_new_door():
        #door locations simplified
        topside = Door(random.randrange(0, screen_width - 60, 60), 0, 60, 10)
        bottomside = Door(random.randrange(0, screen_width - 60, 60), (screen_height - 10), 60, 10)
        leftside = Door(0, random.randrange(0, screen_height, 60), 10, 60)
        rightside = Door((screen_width - 10), random.randrange(0, screen_height, 60), 10, 60)
        return random.choice([topside, bottomside, leftside, rightside])

    def draw(self,screen):
        pygame.draw.rect(screen, pygame.Color(self.color), self.rect)

class Score():
    def __init__(self, level, pos=(700,20)):
        self.level = level
        self.pos = pos
        self.font = pygame.font.Font(None,30)

    def draw(self,screen):
        text = self.font.render(f"Lvl: {self.level}", True, 'White')
        screen.blit(text, self.pos)

class Hostile():
    def __init__(self, width=40, height=40):
        self.width = width
        self.height = height
        self.rect = pygame.Rect(random.randrange(screen_width - width), random.randrange(screen_height - height), width, height)
        self.color = pygame.Color('Red')
        self.velocity = 1
        self.direction_x = random.choice([-1, 1])
        self.direction_y = random.choice([-1, 1])

    def update(self, player):
        #damage to player
        if self.rect.colliderect(player.rect):
            self.color = 'Blue'
            player.take_dmg(5)
            print(player.health)
        else:
            self.color = 'Red'
    
    def _check_level(self, score):
        if score.level <= 5:
            return
        if score.level > 5:
            self.velocity *= 2
        if score.level > 10:
            self.velocity *= 3


    def update_position(self):
        #movement of hostile
        self.rect.x += self.velocity * self.direction_x
        self.rect.y += self.velocity * self.direction_y
        #east/west walls
        if self.rect.left < 0 or self.rect.right > screen_width:
            self.direction_x *= -1
        #north/south walls
        if self.rect.top < 0 or self.rect.bottom > screen_height:
            self.direction_y *= -1

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, self.rect)

def generate_level(player, door, hostile):
    #door changes
    if door.rect.x == 0:
        player.rect.topleft = (screen_width - player.rect.width, door.rect.centery - player.rect.height // 2)
    elif door.rect.x == screen_width - door.rect.width:
        player.rect.topleft = (0, door.rect.centery - player.rect.height // 2)
    elif door.rect.y == 0:
        player.rect.topleft = (door.rect.centerx - player.rect.width // 2, screen_height - player.rect.height)
    elif door.rect.y == screen_height - door.rect.height:
        player.rect.topleft = (door.rect.centerx - player.rect.width // 2, 0)
    door.color = 'Yellow'
    door.is_open = False

    hostile.rect.x = random.randrange(screen_width - hostile.width)
    hostile.rect.y = random.randrange(screen_height - hostile.height)

def main():
    pygame.init()
    pygame.display.set_caption("Simple RPG")
    screen = pygame.display.set_mode(screen_dimensions)
    clock = pygame.time.Clock()

    player = Player()
    door = Door(200, 0, 60, 10)
    level = 1
    score= Score(level)
    hostile = Hostile()
    
    generate_level(player, door, hostile)

    #game loop
    running = True
    while running:

        #event handler
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
        
        #player updates
        player.update_position()

        #hostile updates
        hostile.update_position()
        hostile.update(player)

        # door detection
        door.update(player)

        #game over
        if player.dead:
            #display game over screen that has:
            #"GAME OVER" text
            #retry button
            #quit button
            running = False

        #background fill
        screen.fill((15,30,15))
        #draw
        player.draw(screen)
        door.draw(screen)
        score.draw(screen)
        hostile.draw(screen)

        if door.is_open:
            generate_level(player, door, hostile)
            level += 1
            print(f"Door opened! Transitioning to level {level}")
            score.level = level
            door = Door.generate_new_door()
        
        pygame.display.update()
        clock.tick(60) #fps


if __name__ == "__main__":
    main()